"""
Database setup script cho Union Management System
Ch·ªâ h·ªó tr·ª£ PostgreSQL database
"""
import sys
import os

# Th√™m th∆∞ m·ª•c g·ªëc c·ªßa project v√†o Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

from sqlalchemy import create_engine
from infrastructure.database.connection import Base, db_manager
from infrastructure.database.models import MemberModel, ReportModel, TaskModel


def create_tables():
    """T·∫°o c√°c b·∫£ng trong database"""
    try:
        engine = db_manager.get_engine()
        
        # T·∫°o t·∫•t c·∫£ c√°c b·∫£ng
        Base.metadata.create_all(engine)
        print("‚úÖ Database tables created successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating tables: {e}")
        return False


def drop_tables():
    """X√≥a t·∫•t c·∫£ c√°c b·∫£ng (s·ª≠ d·ª•ng c·∫©n th·∫≠n!)"""
    try:
        engine = db_manager.get_engine()
        
        # X√≥a t·∫•t c·∫£ c√°c b·∫£ng
        Base.metadata.drop_all(engine)
        print("‚ö†Ô∏è All tables dropped!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error dropping tables: {e}")
        return False


def init_database():
    """Kh·ªüi t·∫°o PostgreSQL database v√† t·∫°o c√°c b·∫£ng"""
    print("üîß Initializing PostgreSQL database...")
    
    # Test k·∫øt n·ªëi
    if not db_manager.test_connection():
        print("‚ùå PostgreSQL database connection failed!")
        return False
    
    print("‚úÖ PostgreSQL database connection successful!")
    
    # T·∫°o c√°c b·∫£ng
    if create_tables():
        print("üéâ PostgreSQL database initialization completed!")
        return True
    else:
        print("‚ùå PostgreSQL database initialization failed!")
        return False


if __name__ == "__main__":
    # Ch·∫°y script n√†y ƒë·ªÉ kh·ªüi t·∫°o database
    init_database()