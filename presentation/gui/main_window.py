import tkinter as tk
from tkinter import ttk, messagebox
from typing import Optional
import sys
import os

# Th√™m project root v√†o Python path
project_root = os.path.join(os.path.dirname(__file__), '..', '..')
sys.path.insert(0, project_root)

# Load environment variables
from dotenv import load_dotenv
load_dotenv(os.path.join(project_root, '.env'))

# Import tuy·ªát ƒë·ªëi
from application.use_cases.member_management import MemberManagementUseCase
from application.use_cases.report_management import ReportManagementUseCase  
from application.use_cases.task_management import TaskManagementUseCase
from infrastructure.repositories.member_repository_impl import MemberRepository
from infrastructure.repositories.report_repository_impl import ReportRepository
from infrastructure.repositories.task_repository_impl import TaskRepository

# Import UI components
from presentation.gui.theme import ModernTheme, StyleManager
from presentation.gui.dashboard_components import DashboardTab
from presentation.gui.member_components import MemberTab, MemberActions, MemberForm
from presentation.gui.report_components import ReportTab, ReportActions, ReportForm
from presentation.gui.task_components import TaskTab, TaskActions, TaskForm

# Import controllers
from presentation.controllers.report_controller import ReportController
from presentation.controllers.task_controller import TaskController


class MainApplication:
    """·ª®ng d·ª•ng ch√≠nh v·ªõi giao di·ªán hi·ªán ƒë·∫°i v√† ki·∫øn tr√∫c modular"""
    
    def __init__(self):
        try:
            self.root = tk.Tk()
            self.root.title("üèõÔ∏è Union Management System")
            self.root.geometry("1400x900")
            self.root.state('zoomed')  # Maximized tr√™n Windows
            
            # Apply modern theme
            StyleManager.apply_theme_to_root(self.root)
            
            # T·∫°o status bar ƒë·∫ßu ti√™n ƒë·ªÉ tr√°nh l·ªói
            self._create_minimal_status_bar()
            
            # Kh·ªüi t·∫°o database tr∆∞·ªõc
            if not self._init_database_on_startup():
                self.root.destroy()
                return
            
            # Kh·ªüi t·∫°o use cases
            self._init_use_cases()
            
            # Kh·ªüi t·∫°o controllers
            self._init_controllers()
            
            # Storage for components
            self.dashboard_cards = {}
            self.all_members = []
            self.all_reports = []
            self.all_tasks = []
            
            # T·∫°o giao di·ªán ƒë·∫ßy ƒë·ªß
            self._create_widgets()
            
        except Exception as e:
            print(f"‚ùå Error during initialization: {e}")
            if hasattr(self, 'root'):
                self.root.destroy()
            raise e
    
    def _create_minimal_status_bar(self):
        """T·∫°o status bar t·ªëi thi·ªÉu ƒë·ªÉ tr√°nh l·ªói"""
        self.status_bar = tk.Label(self.root, text="ƒêang kh·ªüi t·∫°o...", 
                                  relief=tk.SUNKEN, anchor=tk.W,
                                  bg=ModernTheme.GRAY_100, fg=ModernTheme.GRAY_700)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
    
    def _init_database_on_startup(self) -> bool:
        """Kh·ªüi t·∫°o database khi ch·∫°y ·ª©ng d·ª•ng"""
        try:
            from infrastructure.database.setup import init_database
            print("üîß Checking and initializing database...")
            
            if init_database():
                print("‚úÖ Database ready!")
                return True
            else:
                messagebox.showerror("L·ªói Database", 
                    "Kh√¥ng th·ªÉ kh·ªüi t·∫°o database!\n"
                    "Vui l√≤ng ki·ªÉm tra:\n"
                    "1. SQL Server ƒëang ch·∫°y\n"
                    "2. Th√¥ng tin k·∫øt n·ªëi trong file .env\n"
                    "3. Quy·ªÅn t·∫°o database")
                return False
        except Exception as e:
            messagebox.showerror("L·ªói Database", f"L·ªói kh·ªüi t·∫°o database: {e}")
            return False
        
    def _init_use_cases(self):
        """Kh·ªüi t·∫°o c√°c use cases"""
        try:
            # Repositories
            member_repo = MemberRepository()
            report_repo = ReportRepository()
            task_repo = TaskRepository()
            
            # Use cases
            self.member_use_case = MemberManagementUseCase(member_repo)
            self.report_use_case = ReportManagementUseCase(report_repo)
            self.task_use_case = TaskManagementUseCase(task_repo)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ k·∫øt n·ªëi database: {e}")
            self.root.destroy()
    
    def _init_controllers(self):
        """Kh·ªüi t·∫°o c√°c controllers"""
        try:
            self.report_controller = ReportController(self.report_use_case)
            self.task_controller = TaskController(self.task_use_case)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o controllers: {e}")
            self.root.destroy()
    
    def _create_widgets(self):
        """T·∫°o giao di·ªán hi·ªán ƒë·∫°i"""
        # Create main container
        self._create_header()
        self._create_main_content()
        self._create_status_bar()
    
    def _create_header(self):
        """T·∫°o header hi·ªán ƒë·∫°i v·ªõi branding v√† navigation"""
        # Header container with increased height
        header_frame = tk.Frame(self.root, bg=ModernTheme.WHITE, height=90)
        header_frame.pack(fill=tk.X, pady=(0, 1))
        header_frame.pack_propagate(False)
        
        # Header content
        header_content = tk.Frame(header_frame, bg=ModernTheme.WHITE)
        header_content.pack(fill=tk.BOTH, expand=True, padx=ModernTheme.PADDING_LARGE, pady=ModernTheme.PADDING_MEDIUM)
        
        # Left side - Logo and title
        left_frame = tk.Frame(header_content, bg=ModernTheme.WHITE)
        left_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        # Logo (emoji as placeholder)
        logo_label = tk.Label(left_frame, text="üèõÔ∏è", font=("Segoe UI", 22), 
                             bg=ModernTheme.WHITE, fg=ModernTheme.PRIMARY)
        logo_label.pack(side=tk.LEFT, padx=(0, 12), anchor=tk.CENTER)
        
        # Title and subtitle
        title_frame = tk.Frame(left_frame, bg=ModernTheme.WHITE)
        title_frame.pack(side=tk.LEFT, fill=tk.Y, anchor=tk.W)
        
        title_label = tk.Label(title_frame, text="Union Management", 
                              font=("Segoe UI", 16, "bold"),
                              bg=ModernTheme.WHITE, fg=ModernTheme.GRAY_900)
        title_label.pack(anchor=tk.W, pady=(0, 2))
        
        subtitle_label = tk.Label(title_frame, text="H·ªá th·ªëng qu·∫£n l√Ω ƒëo√†n - h·ªôi", 
                                 font=("Segoe UI", 11),
                                 bg=ModernTheme.WHITE, fg=ModernTheme.GRAY_600)
        subtitle_label.pack(anchor=tk.W)
        
        # Right side - Quick actions
        right_frame = tk.Frame(header_content, bg=ModernTheme.WHITE)
        right_frame.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Quick action buttons
        quick_actions = [
            ("üîÑ", "L√†m m·ªõi", self._refresh_all_data),
            ("üìä", "Th·ªëng k√™", self._show_statistics),
            ("‚öôÔ∏è", "C√†i ƒë·∫∑t", self._show_settings),
        ]
        
        for icon, tooltip, command in quick_actions:
            btn = tk.Button(right_frame, text=icon, font=("Segoe UI", 14),
                           bg=ModernTheme.GRAY_100, fg=ModernTheme.GRAY_700,
                           border=0, cursor="hand2", padx=10, pady=6,
                           command=command)
            btn.pack(side=tk.RIGHT, padx=2)
            
            # Add tooltip (simplified)
            btn.bind("<Enter>", lambda e, t=tooltip: self.update_status(t, temp=True))
            btn.bind("<Leave>", lambda e: self.update_status(""))
    
    def _create_main_content(self):
        """T·∫°o n·ªôi dung ch√≠nh"""
        # Main container
        main_container = tk.Frame(self.root, bg=ModernTheme.GRAY_50)
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # Create notebook with modern style
        self.notebook = ttk.Notebook(main_container, style='Modern.TNotebook')
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Create tabs using component modules
        self._create_tabs()
    
    def _create_tabs(self):
        """T·∫°o c√°c tabs s·ª≠ d·ª•ng component modules"""
        # Dashboard tab
        dashboard_frame, self.dashboard_cards = DashboardTab.create_dashboard_tab(
            self.notebook, 
            notebook_ref=self.notebook,
            quick_action_callbacks={
                'add_member': self._add_member_quick,
                'create_report': self._create_report_quick,
                'create_task': self._create_task_quick,
                'view_statistics': self._view_statistics
            }
        )
        self.notebook.add(dashboard_frame, text="üè† Dashboard")
        
        # Member tab - s·ª≠ d·ª•ng controller m·ªõi
        from presentation.controllers.member_controller import MemberController
        self.member_controller = MemberController(self.notebook)
        member_frame = self.member_controller.get_main_frame()
        self.notebook.add(member_frame, text="üë• Th√†nh vi√™n")
        
        # Report tab
        report_frame, self.report_tree, self.report_search_var, self.report_filter_vars = ReportTab.create_report_tab(
            self.notebook,
            callbacks={
                'add_report': self._add_report,
                'view_report': self._edit_report,  # G·ªôp view v√† edit th√†nh m·ªôt
                'delete_report': self._delete_report,
                'approve_report': self._approve_report,
                'search_reports': self._search_reports,
                'filter_reports': self._filter_reports,
                'export_reports': self._export_reports,
                'bulk_action': self._bulk_action_reports,
                'refresh_data': self._refresh_reports
            }
        )
        self.notebook.add(report_frame, text="üìã B√°o c√°o")
        
        # Task tab
        task_frame, self.task_tree, self.task_search_var, self.task_filter_vars = TaskTab.create_task_tab(
            self.notebook,
            callbacks={
                'add_task': self._add_task,
                'view_task': self._edit_task,  # G·ªôp view v√† edit th√†nh m·ªôt
                'complete_task': self._complete_task,
                'delete_task': self._delete_task,
                'search_tasks': self._search_tasks,
                'filter_tasks': self._filter_tasks,
                'export_tasks': self._export_tasks,
                'bulk_action': self._bulk_action_tasks,
                'refresh_data': self._refresh_tasks
            }
        )
        self.notebook.add(task_frame, text="‚úÖ C√¥ng vi·ªác")
        
        # Schedule data loading after GUI is ready (only once)
        self._data_loaded = False
        self.root.after(100, self._load_initial_data_once)
    
    def _create_status_bar(self):
        """T·∫°o status bar hi·ªán ƒë·∫°i"""
        # Remove old status bar if exists
        if hasattr(self, 'status_bar'):
            self.status_bar.destroy()
        
        self.status_bar = tk.Frame(self.root, bg=ModernTheme.GRAY_100, height=30)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        self.status_bar.pack_propagate(False)
        
        # Status content
        status_content = tk.Frame(self.status_bar, bg=ModernTheme.GRAY_100)
        status_content.pack(fill=tk.BOTH, expand=True, padx=ModernTheme.PADDING_MEDIUM, 
                           pady=4)
        
        # Status text
        self.status_label = tk.Label(status_content, text="S·∫µn s√†ng", 
                                    font=ModernTheme.FONT_SMALL,
                                    bg=ModernTheme.GRAY_100, fg=ModernTheme.GRAY_700,
                                    anchor=tk.W)
        self.status_label.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # Connection status
        self.connection_label = tk.Label(status_content, text="üü¢ ƒê√£ k·∫øt n·ªëi", 
                                        font=ModernTheme.FONT_SMALL,
                                        bg=ModernTheme.GRAY_100, fg=ModernTheme.GRAY_600)
        self.connection_label.pack(side=tk.RIGHT)
        
        # Update status
        self.update_status("H·ªá th·ªëng s·∫µn s√†ng")
        
        # Schedule dashboard refresh after initial data loading
        self.root.after(600, self._refresh_dashboard)
    
    def update_status(self, message: str, temp: bool = False):
        """C·∫≠p nh·∫≠t status bar"""
        if hasattr(self, 'status_label'):
            self.status_label.config(text=message)
            if temp:
                self.root.after(3000, lambda: self.update_status("S·∫µn s√†ng"))
    
    # Data loading methods
    def _load_initial_data_once(self):
        """Load initial data for all tabs (only once)"""
        if not self._data_loaded:
            self._data_loaded = True
            self._load_initial_data()
    
    def _load_initial_data(self):
        """Load initial data for all tabs"""
        self._refresh_members()
        self._refresh_reports()
        self._refresh_tasks()
    
    def _refresh_members(self):
        """L√†m m·ªõi danh s√°ch th√†nh vi√™n"""
        try:
            # Use member controller to refresh data
            if hasattr(self, 'member_controller'):
                self.member_controller.refresh_data()
                self.all_members = self.member_controller.all_members
                self.update_status(f"ƒê√£ t·∫£i {len(self.all_members)} th√†nh vi√™n", temp=True)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch th√†nh vi√™n: {e}")
    
    def _refresh_reports(self):
        """L√†m m·ªõi danh s√°ch b√°o c√°o"""
        try:
            print("üîÑ Loading reports...")
            self.all_reports = self.report_controller.get_all_reports()
            print(f"üìä Found {len(self.all_reports)} reports")
            ReportActions.populate_report_tree(self.report_tree, self.all_reports)
            print("‚úÖ Report tree populated")
            self.update_status(f"ƒê√£ t·∫£i {len(self.all_reports)} b√°o c√°o", temp=True)
        except Exception as e:
            print(f"‚ùå Error loading reports: {e}")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√°o c√°o: {e}")
    
    def _refresh_tasks(self):
        """L√†m m·ªõi danh s√°ch c√¥ng vi·ªác"""
        try:
            print("üîÑ Loading tasks...")
            self.all_tasks = self.task_controller.get_all_tasks()
            print(f"üìä Found {len(self.all_tasks)} tasks")
            
            # Create members map for displaying member names
            members_map = TaskActions.create_members_map(self.all_members)
            
            TaskActions.populate_task_tree(self.task_tree, self.all_tasks, members_map)
            print("‚úÖ Task tree populated")
            self.update_status(f"ƒê√£ t·∫£i {len(self.all_tasks)} c√¥ng vi·ªác", temp=True)
        except Exception as e:
            print(f"‚ùå Error loading tasks: {e}")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch c√¥ng vi·ªác: {e}")
    
    def _refresh_dashboard(self):
        """L√†m m·ªõi th·ªëng k√™ dashboard"""
        try:
            # Member statistics
            member_stats = self.member_use_case.get_member_statistics()
            if 'th√†nh vi√™n_card' in self.dashboard_cards:
                card = self.dashboard_cards['th√†nh vi√™n_card']
                card.number_label.config(text=str(member_stats['total']))
                card.subtitle_label.config(text=f"ƒêang ho·∫°t ƒë·ªông: {member_stats['active']}")
            
            # Report statistics  
            report_stats = self.report_use_case.get_report_statistics()
            if 'b√°o c√°o_card' in self.dashboard_cards:
                card = self.dashboard_cards['b√°o c√°o_card']
                card.number_label.config(text=str(report_stats['total']))
                card.subtitle_label.config(text=f"Ch·ªù duy·ªát: {report_stats['submitted']}")
            
            # Task statistics
            task_stats = self.task_use_case.get_task_statistics()
            if 'c√¥ng vi·ªác_card' in self.dashboard_cards:
                card = self.dashboard_cards['c√¥ng vi·ªác_card']
                card.number_label.config(text=str(task_stats['total']))
                card.subtitle_label.config(text=f"Ho√†n th√†nh: {task_stats['completed']}")
            
            self.update_status("ƒê√£ c·∫≠p nh·∫≠t th·ªëng k√™", temp=True)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™: {e}")
    
    # Quick action methods for dashboard
    def _add_member_quick(self):
        """Quick action: Th√™m th√†nh vi√™n"""
        self.notebook.select(1)
        self.update_status("Chuy·ªÉn ƒë·∫øn tab Th√†nh vi√™n", temp=True)
    
    def _create_report_quick(self):
        """Quick action: T·∫°o b√°o c√°o"""
        self.notebook.select(2)
        self.update_status("Chuy·ªÉn ƒë·∫øn tab B√°o c√°o", temp=True)
    
    def _create_task_quick(self):
        """Quick action: T·∫°o c√¥ng vi·ªác"""
        self.notebook.select(3)
        self.update_status("Chuy·ªÉn ƒë·∫øn tab C√¥ng vi·ªác", temp=True)
    
    def _view_statistics(self):
        """Quick action: Xem th·ªëng k√™"""
        self._refresh_dashboard()
        self.update_status("ƒê√£ l√†m m·ªõi th·ªëng k√™", temp=True)
    
    # Member management methods
    def _add_member(self):
        """Th√™m th√†nh vi√™n m·ªõi"""
        result = MemberForm.create_member_form_dialog(self.root, "Th√™m th√†nh vi√™n m·ªõi")
        if result:
            try:
                # TODO: Implement actual member creation
                messagebox.showinfo("Th√†nh c√¥ng", "Th√™m th√†nh vi√™n th√†nh c√¥ng!")
                self._refresh_members()
                self._refresh_dashboard()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m th√†nh vi√™n: {e}")
    
    def _edit_member(self):
        """S·ª≠a th√¥ng tin th√†nh vi√™n"""
        try:
            if hasattr(self, 'member_controller'):
                self.member_controller.edit_member()
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th√†nh vi√™n c·∫ßn s·ª≠a!")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ s·ª≠a th√†nh vi√™n: {e}")
    
    def _delete_member(self):
        """X√≥a th√†nh vi√™n"""
        try:
            if hasattr(self, 'member_controller'):
                self.member_controller.delete_member()
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th√†nh vi√™n c·∫ßn x√≥a!")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a th√†nh vi√™n: {e}")
    
    # Report management methods
    def _add_report(self):
        """T·∫°o b√°o c√°o m·ªõi"""
        result = ReportForm.create_report_form_dialog(self.root, "T·∫°o b√°o c√°o m·ªõi")
        if result:
            try:
                success = self.report_controller.create_report(result)
                if success:
                    self._refresh_reports()
                    self._refresh_dashboard()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o b√°o c√°o: {e}")
    
    def _edit_report(self):
        """S·ª≠a b√°o c√°o"""
        report_id = ReportActions.get_selected_report_id(self.report_tree)
        if not report_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn b√°o c√°o c·∫ßn s·ª≠a!")
            return
        
        try:
            # L·∫•y th√¥ng tin b√°o c√°o hi·ªán t·∫°i
            report = self.report_controller.get_report_by_id(report_id)
            if not report:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y b√°o c√°o!")
                return
            
            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
            display_data = self.report_controller.format_report_data_for_display(report)
            
            # Hi·ªÉn th·ªã form s·ª≠a
            result = ReportForm.create_report_form_dialog(
                self.root, "Ch·ªânh s·ª≠a b√°o c√°o", display_data)
            
            if result:
                success = self.report_controller.update_report(report_id, result)
                if success:
                    self._refresh_reports()
                    self._refresh_dashboard()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ s·ª≠a b√°o c√°o: {e}")
    
    def _approve_report(self):
        """Duy·ªát b√°o c√°o"""
        report_id = ReportActions.get_selected_report_id(self.report_tree)
        if not report_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn b√°o c√°o c·∫ßn duy·ªát!")
            return
        
        try:
            # TODO: L·∫•y user ID t·ª´ session th·ª±c t·∫ø
            approved_by_id = 1  # Temporary user ID
            
            success = self.report_controller.approve_report(report_id, approved_by_id)
            if success:
                self._refresh_reports()
                self._refresh_dashboard()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ duy·ªát b√°o c√°o: {e}")

    def _delete_report(self):
        """X√≥a b√°o c√°o"""
        report_id = ReportActions.get_selected_report_id(self.report_tree)
        if not report_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn b√°o c√°o c·∫ßn x√≥a!")
            return
        
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√°o c√°o n√†y?"):
            try:
                success = self.report_controller.delete_report(report_id)
                if success:
                    self._refresh_reports()
                    self._refresh_dashboard()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a b√°o c√°o: {e}")

    def _search_reports(self, event=None):
        """T√¨m ki·∫øm b√°o c√°o"""
        try:
            search_term = getattr(self, 'report_search_var', tk.StringVar()).get()
            if search_term and search_term != "T√¨m ki·∫øm b√°o c√°o...":
                # Implement search logic here
                pass
            self._refresh_reports()
        except Exception as e:
            print(f"Search error: {e}")

    def _export_reports(self):
        """Xu·∫•t danh s√°ch b√°o c√°o ra Excel"""
        try:
            if hasattr(self, 'report_tree') and self.all_reports:
                # Xu·∫•t b√°o c√°o hi·ªán t·∫°i ƒëang hi·ªÉn th·ªã tr√™n tree
                file_path = ReportActions.export_visible_reports_to_excel(self.report_tree, self.all_reports)
                if file_path:
                    self.update_status(f"ƒê√£ xu·∫•t b√°o c√°o th√†nh c√¥ng: {file_path}")
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o ƒë·ªÉ xu·∫•t!")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: {e}")
            print(f"Export reports error: {e}")

    def _bulk_action_reports(self, action):
        """Thao t√°c h√†ng lo·∫°t cho b√°o c√°o"""
        try:
            # L·∫•y c√°c b√°o c√°o ƒë∆∞·ª£c ch·ªçn t·ª´ enhanced table
            if not hasattr(self, 'report_tree'):
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y b·∫£ng b√°o c√°o!")
                return
            
            # L·∫•y danh s√°ch ID ƒë∆∞·ª£c ch·ªçn t·ª´ checkbox
            selected_ids = []
            for item in self.report_tree.get_children():
                values = self.report_tree.item(item)['values']
                if len(values) > 0 and values[0] == '‚òë':  # Checkbox ƒë∆∞·ª£c ch·ªçn
                    try:
                        report_id = int(values[1])  # ID ·ªü c·ªôt th·ª© 2
                        selected_ids.append(report_id)
                    except (ValueError, IndexError):
                        continue
            
            if not selected_ids:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b√°o c√°o!")
                return
            
            # Th·ª±c hi·ªán thao t√°c t∆∞∆°ng ·ª©ng
            success_count = 0
            if action == 'approve':
                for report_id in selected_ids:
                    try:
                        # C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh 'approved' trong database
                        report = self.report_controller.get_report_by_id(report_id)
                        if report:
                            from domain.entities.report import ReportStatus
                            # S·ª≠ d·ª•ng format_report_data_for_display ƒë·ªÉ c√≥ format ƒë√∫ng
                            report_data = self.report_controller.format_report_data_for_display(report)
                            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                            report_data['status'] = '‚úÖ ƒê√£ duy·ªát'  # Use emoji version for consistency
                            self.report_controller.update_report(report_id, report_data)
                            success_count += 1
                    except Exception as e:
                        print(f"Error approving report {report_id}: {e}")
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ duy·ªát {success_count}/{len(selected_ids)} b√°o c√°o!")
                
            elif action == 'reject':
                for report_id in selected_ids:
                    try:
                        # C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh 'rejected' trong database
                        report = self.report_controller.get_report_by_id(report_id)
                        if report:
                            from domain.entities.report import ReportStatus
                            # S·ª≠ d·ª•ng format_report_data_for_display ƒë·ªÉ c√≥ format ƒë√∫ng
                            report_data = self.report_controller.format_report_data_for_display(report)
                            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                            report_data['status'] = '‚ùå T·ª´ ch·ªëi'  # Use emoji version for consistency
                            self.report_controller.update_report(report_id, report_data)
                            success_count += 1
                    except Exception as e:
                        print(f"Error rejecting report {report_id}: {e}")
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·ª´ ch·ªëi {success_count}/{len(selected_ids)} b√°o c√°o!")
                
            elif action == 'delete':
                if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a {len(selected_ids)} b√°o c√°o ƒë∆∞·ª£c ch·ªçn?"):
                    for report_id in selected_ids:
                        try:
                            self.report_controller.delete_report(report_id)
                            success_count += 1
                        except Exception as e:
                            print(f"Error deleting report {report_id}: {e}")
                    
                    messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a {success_count}/{len(selected_ids)} b√°o c√°o!")
            
            # L√†m m·ªõi danh s√°ch
            self._refresh_reports()
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c: {e}")
            print(f"Bulk action error: {e}")

    def _refresh_reports(self):
        """L√†m m·ªõi danh s√°ch b√°o c√°o"""
        try:
            print("üîÑ Loading reports...")
            self.all_reports = self.report_controller.get_all_reports()
            print(f"üìä Found {len(self.all_reports)} reports")
            ReportActions.populate_report_tree(self.report_tree, self.all_reports)
            print("‚úÖ Report tree populated")
            self.update_status(f"ƒê√£ t·∫£i {len(self.all_reports)} b√°o c√°o", temp=True)
        except Exception as e:
            print(f"‚ùå Error loading reports: {e}")
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√°o c√°o: {e}")
    
    def _filter_reports(self, event=None):
        """L·ªçc b√°o c√°o theo nhi·ªÅu ti√™u ch√≠"""
        try:
            # L·∫•y t·∫•t c·∫£ filter values
            report_type_filter = self.report_filter_vars.get('report_type', tk.StringVar()).get()
            period_filter = self.report_filter_vars.get('period', tk.StringVar()).get()
            status_filter = self.report_filter_vars.get('status', tk.StringVar()).get()
            
            print(f"üîç Debug - Report filters: Type={report_type_filter}, Period={period_filter}, Status={status_filter}")
            
            # L·ªçc d·ªØ li·ªáu
            filtered_reports = []
            for report in self.all_reports:
                # Ki·ªÉm tra t·ª´ng filter
                if report_type_filter and report_type_filter != "T·∫•t c·∫£":
                    if hasattr(report, 'report_type') and str(report.report_type) != report_type_filter:
                        continue
                
                if period_filter and period_filter != "T·∫•t c·∫£":
                    if hasattr(report, 'period') and str(report.period) != period_filter:
                        continue
                
                if status_filter and status_filter != "T·∫•t c·∫£":
                    if hasattr(report, 'status') and str(report.status) != status_filter:
                        continue
                
                filtered_reports.append(report)
            
            # C·∫≠p nh·∫≠t table v·ªõi d·ªØ li·ªáu ƒë√£ l·ªçc
            ReportActions.populate_report_tree(self.report_tree, filtered_reports)
            self.update_status(f"ƒê√£ l·ªçc {len(filtered_reports)}/{len(self.all_reports)} b√°o c√°o", temp=True)
            
        except Exception as e:
            print(f"‚ùå Filter reports error: {e}")
            # Fallback to show all reports
            ReportActions.populate_report_tree(self.report_tree, self.all_reports)
    
    # Task management methods
    def _add_task(self):
        """T·∫°o c√¥ng vi·ªác m·ªõi"""
        result = TaskForm.create_task_form_dialog(self.root, "T·∫°o c√¥ng vi·ªác m·ªõi")
        if result:
            try:
                success = self.task_controller.create_task(result)
                if success:
                    self._refresh_tasks()
                    self._refresh_dashboard()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o c√¥ng vi·ªác: {e}")
    
    def _edit_task(self):
        """S·ª≠a c√¥ng vi·ªác"""
        task_id = TaskActions.get_selected_task_id(self.task_tree)
        if not task_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn c√¥ng vi·ªác c·∫ßn s·ª≠a!")
            return
        
        try:
            # L·∫•y th√¥ng tin task hi·ªán t·∫°i
            task = self.task_controller.get_task_by_id(task_id)
            if not task:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác!")
                return
            
            # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã
            display_data = self.task_controller.format_task_data_for_display(task)
            
            # Hi·ªÉn th·ªã form s·ª≠a
            result = TaskForm.create_task_form_dialog(
                self.root, "Ch·ªânh s·ª≠a c√¥ng vi·ªác", display_data)
            
            if result:
                success = self.task_controller.update_task(task_id, result)
                if success:
                    self._refresh_tasks()
                    self._refresh_dashboard()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ s·ª≠a c√¥ng vi·ªác: {e}")
    
    def _complete_task(self):
        """Ho√†n th√†nh c√¥ng vi·ªác"""
        task_id = TaskActions.get_selected_task_id(self.task_tree)
        if not task_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn c√¥ng vi·ªác c·∫ßn ho√†n th√†nh!")
            return
        
        try:
            # X√°c nh·∫≠n
            confirm = messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën ƒë√°nh d·∫•u ho√†n th√†nh c√¥ng vi·ªác n√†y?")
            if confirm:
                success = self.task_controller.complete_task(task_id)
                if success:
                    self._refresh_tasks()
                    self._refresh_dashboard()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ho√†n th√†nh c√¥ng vi·ªác: {e}")
    
    def _delete_task(self):
        """X√≥a c√¥ng vi·ªác"""
        task_id = TaskActions.get_selected_task_id(self.task_tree)
        if not task_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn c√¥ng vi·ªác c·∫ßn x√≥a!")
            return
        
        try:
            # X√°c nh·∫≠n x√≥a
            confirm = messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√¥ng vi·ªác n√†y?\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!")
            if confirm:
                success = self.task_controller.delete_task(task_id)
                if success:
                    self._refresh_tasks()
                    self._refresh_dashboard()
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a c√¥ng vi·ªác: {e}")

    def _search_tasks(self, event=None):
        """T√¨m ki·∫øm c√¥ng vi·ªác"""
        try:
            search_term = getattr(self, 'task_search_var', tk.StringVar()).get()
            if search_term and search_term != "T√¨m ki·∫øm c√¥ng vi·ªác...":
                # Implement search logic here
                pass
            self._refresh_tasks()
        except Exception as e:
            print(f"Search error: {e}")

    def _export_tasks(self):
        """Xu·∫•t danh s√°ch c√¥ng vi·ªác ra Excel"""
        try:
            if hasattr(self, 'task_tree') and self.all_tasks:
                # Xu·∫•t c√¥ng vi·ªác hi·ªán t·∫°i ƒëang hi·ªÉn th·ªã tr√™n tree
                file_path = TaskActions.export_visible_tasks_to_excel(self.task_tree, self.all_tasks)
                if file_path:
                    self.update_status(f"ƒê√£ xu·∫•t c√¥ng vi·ªác th√†nh c√¥ng: {file_path}")
            else:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu c√¥ng vi·ªác ƒë·ªÉ xu·∫•t!")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t c√¥ng vi·ªác: {e}")
            print(f"Export tasks error: {e}")

    def _bulk_action_tasks(self, action):
        """Thao t√°c h√†ng lo·∫°t cho c√¥ng vi·ªác"""
        try:
            # L·∫•y c√°c c√¥ng vi·ªác ƒë∆∞·ª£c ch·ªçn t·ª´ enhanced table
            if not hasattr(self, 'task_tree'):
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y b·∫£ng c√¥ng vi·ªác!")
                return
            
            # L·∫•y danh s√°ch ID ƒë∆∞·ª£c ch·ªçn t·ª´ checkbox
            selected_ids = []
            for item in self.task_tree.get_children():
                values = self.task_tree.item(item)['values']
                if len(values) > 0 and values[0] == '‚òë':  # Checkbox ƒë∆∞·ª£c ch·ªçn
                    try:
                        task_id = int(values[1])  # ID ·ªü c·ªôt th·ª© 2
                        selected_ids.append(task_id)
                    except (ValueError, IndexError):
                        continue
            
            if not selected_ids:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c√¥ng vi·ªác!")
                return
            
            # Th·ª±c hi·ªán thao t√°c t∆∞∆°ng ·ª©ng
            success_count = 0
            if action == 'complete':
                for task_id in selected_ids:
                    try:
                        # C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh 'completed' trong database
                        task = self.task_controller.get_task_by_id(task_id)
                        if task:
                            from domain.entities.task import TaskStatus
                            # Convert priority to Vietnamese display name
                            priority_value = task.priority.value if hasattr(task.priority, 'value') else str(task.priority)
                            priority_display = {
                                'low': 'Th·∫•p',
                                'medium': 'Trung b√¨nh', 
                                'high': 'Cao',
                                'urgent': 'Kh·∫©n c·∫•p'
                            }.get(priority_value, 'Trung b√¨nh')
                            
                            # Chuy·ªÉn ƒë·ªïi th√†nh dictionary cho controller
                            task_data = {
                                'title': task.title,
                                'description': getattr(task, 'description', ''),
                                'priority': priority_display,
                                'status': 'Ho√†n th√†nh',  # Use Vietnamese display name
                                'assigned_to': str(getattr(task, 'assigned_to', '')),
                                'due_date': task.due_date.strftime('%d/%m/%Y') if hasattr(task, 'due_date') and task.due_date else '',
                                'progress_percentage': '100'
                            }
                            self.task_controller.update_task(task_id, task_data)
                            success_count += 1
                    except Exception as e:
                        print(f"Error completing task {task_id}: {e}")
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ ho√†n th√†nh {success_count}/{len(selected_ids)} c√¥ng vi·ªác!")
                
            elif action == 'pause':
                for task_id in selected_ids:
                    try:
                        # C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh 'on_hold' trong database
                        task = self.task_controller.get_task_by_id(task_id)
                        if task:
                            from domain.entities.task import TaskStatus
                            # Convert priority to Vietnamese display name
                            priority_value = task.priority.value if hasattr(task.priority, 'value') else str(task.priority)
                            priority_display = {
                                'low': 'Th·∫•p',
                                'medium': 'Trung b√¨nh', 
                                'high': 'Cao',
                                'urgent': 'Kh·∫©n c·∫•p'
                            }.get(priority_value, 'Trung b√¨nh')
                            
                            # Chuy·ªÉn ƒë·ªïi th√†nh dictionary cho controller
                            task_data = {
                                'title': task.title,
                                'description': getattr(task, 'description', ''),
                                'priority': priority_display,
                                'status': 'T·∫°m d·ª´ng',  # Use Vietnamese display name
                                'assigned_to': str(getattr(task, 'assigned_to', '')),
                                'due_date': task.due_date.strftime('%d/%m/%Y') if hasattr(task, 'due_date') and task.due_date else '',
                                'progress_percentage': str(getattr(task, 'progress_percentage', 0))
                            }
                            self.task_controller.update_task(task_id, task_data)
                            success_count += 1
                    except Exception as e:
                        print(f"Error pausing task {task_id}: {e}")
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·∫°m d·ª´ng {success_count}/{len(selected_ids)} c√¥ng vi·ªác!")
                
            elif action == 'delete':
                if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a {len(selected_ids)} c√¥ng vi·ªác ƒë∆∞·ª£c ch·ªçn?"):
                    for task_id in selected_ids:
                        try:
                            self.task_controller.delete_task(task_id)
                            success_count += 1
                        except Exception as e:
                            print(f"Error deleting task {task_id}: {e}")
                    
                    messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a {success_count}/{len(selected_ids)} c√¥ng vi·ªác!")
            
            # L√†m m·ªõi danh s√°ch
            self._refresh_tasks()
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c: {e}")
            print(f"Bulk action error: {e}")
    
    def _filter_tasks(self, event=None):
        """L·ªçc c√¥ng vi·ªác theo nhi·ªÅu ti√™u ch√≠"""
        try:
            # L·∫•y t·∫•t c·∫£ filter values
            priority_filter = self.task_filter_vars.get('priority', tk.StringVar()).get()
            status_filter = self.task_filter_vars.get('status', tk.StringVar()).get()
            assignee_filter = self.task_filter_vars.get('assignee', tk.StringVar()).get()
            
            print(f"üîç Debug - Task filters: Priority={priority_filter}, Status={status_filter}, Assignee={assignee_filter}")
            
            # L·ªçc d·ªØ li·ªáu
            filtered_tasks = []
            for task in self.all_tasks:
                # Ki·ªÉm tra t·ª´ng filter
                if priority_filter and priority_filter != "T·∫•t c·∫£":
                    priority_mapping = {
                        'Th·∫•p': 'low',
                        'Trung b√¨nh': 'medium', 
                        'Cao': 'high',
                        'Kh·∫©n c·∫•p': 'urgent'
                    }
                    db_priority = priority_mapping.get(priority_filter, priority_filter.lower())
                    task_priority = task.priority.value if hasattr(task.priority, 'value') else str(task.priority)
                    if task_priority != db_priority:
                        continue
                
                if status_filter and status_filter != "T·∫•t c·∫£":
                    status_mapping = {
                        'Ch·ªù th·ª±c hi·ªán': 'not_started',
                        'ƒêang th·ª±c hi·ªán': 'in_progress',
                        'Ho√†n th√†nh': 'completed',
                        'T·∫°m d·ª´ng': 'on_hold'
                    }
                    db_status = status_mapping.get(status_filter, status_filter.lower())
                    task_status = task.status.value if hasattr(task.status, 'value') else str(task.status)
                    if task_status != db_status:
                        continue
                
                if assignee_filter and assignee_filter != "T·∫•t c·∫£":
                    # TODO: Implement assignee filtering logic based on current user
                    pass
                
                filtered_tasks.append(task)
            
            # Create members map for displaying member names
            members_map = TaskActions.create_members_map(self.all_members)
            
            # C·∫≠p nh·∫≠t table v·ªõi d·ªØ li·ªáu ƒë√£ l·ªçc
            TaskActions.populate_task_tree(self.task_tree, filtered_tasks, members_map)
            self.update_status(f"ƒê√£ l·ªçc {len(filtered_tasks)}/{len(self.all_tasks)} c√¥ng vi·ªác", temp=True)
            
        except Exception as e:
            print(f"‚ùå Filter tasks error: {e}")
            # Fallback to show all tasks
            members_map = TaskActions.create_members_map(self.all_members)
            TaskActions.populate_task_tree(self.task_tree, self.all_tasks, members_map)
            
        except Exception as e:
            print(f"‚ùå Error filtering tasks: {e}")
            # Fallback to show all tasks
            members_map = TaskActions.create_members_map(self.all_members)
            TaskActions.populate_task_tree(self.task_tree, self.all_tasks, members_map)
    
    # Header action methods
    def _refresh_all_data(self):
        """L√†m m·ªõi t·∫•t c·∫£ d·ªØ li·ªáu"""
        self._refresh_members()
        self._refresh_reports()
        self._refresh_tasks()
        self._refresh_dashboard()
        self.update_status("ƒê√£ l√†m m·ªõi t·∫•t c·∫£ d·ªØ li·ªáu", temp=True)
    
    def _show_statistics(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ chi ti·∫øt"""
        self.notebook.select(0)  # Switch to dashboard
        self._refresh_dashboard()
    
    def _show_settings(self):
        """Hi·ªÉn th·ªã c√†i ƒë·∫∑t"""
        messagebox.showinfo("C√†i ƒë·∫∑t", "Ch·ª©c nƒÉng c√†i ƒë·∫∑t ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.root.mainloop()


if __name__ == "__main__":
    try:
        app = MainApplication()
        app.run()
    except Exception as e:
        print(f"‚ùå Application failed to start: {e}")
        input("Press Enter to exit...")