#!/usr/bin/env python3
"""
Test PostgreSQL database connection v√† truy v·∫•n d·ªØ li·ªáu
Ch·ªâ h·ªó tr·ª£ PostgreSQL - SQLite ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè
"""
import os
import sys
sys.path.append(os.path.dirname(__file__))

from dotenv import load_dotenv
load_dotenv()

from sqlalchemy import text
from infrastructure.database.connection import db_manager

def test_database():
    """Test k·∫øt n·ªëi v√† truy v·∫•n PostgreSQL database"""
    
    try:
        # Test k·∫øt n·ªëi PostgreSQL
        if not db_manager.test_connection():
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi PostgreSQL database")
            return False
        
        session = db_manager.get_session()
        print("üîó K·∫øt n·ªëi PostgreSQL database th√†nh c√¥ng!")
        
        # Test query members v·ªõi schema m·ªõi
        print("\nüë• Danh s√°ch th√†nh vi√™n:")
        try:
            result = session.execute(text("SELECT id, member_code, full_name, email, member_type, status FROM members LIMIT 5"))
            for row in result:
                print(f"  - {row.id}: {row.member_code} - {row.full_name} ({row.email}) - {row.member_type} - {row.status}")
        except Exception as e:
            print(f"  Ch∆∞a c√≥ th√†nh vi√™n n√†o: {e}")
        
        # Test query tasks v·ªõi schema m·ªõi
        print("\nüìã Danh s√°ch c√¥ng vi·ªác:")
        try:
            result = session.execute(text("SELECT id, title, priority, status, assigned_to FROM tasks LIMIT 5"))
            for row in result:
                print(f"  - {row.id}: {row.title} - {row.priority} - {row.status} - Assigned: {row.assigned_to}")
        except Exception as e:
            print(f"  Ch∆∞a c√≥ c√¥ng vi·ªác n√†o: {e}")
        
        # Test query reports v·ªõi schema m·ªõi
        print("\nüìä Danh s√°ch b√°o c√°o:")
        try:
            result = session.execute(text("SELECT id, title, report_type, status FROM reports LIMIT 5"))
            for row in result:
                print(f"  - {row.id}: {row.title} - {row.report_type} - {row.status}")
        except Exception as e:
            print(f"  Ch∆∞a c√≥ b√°o c√°o n√†o: {e}")
        
        session.close()
        print("\n‚úÖ Test PostgreSQL database th√†nh c√¥ng!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test PostgreSQL database: {e}")
        return False


if __name__ == "__main__":
    print("üß™ Test PostgreSQL Database Connection")
    print("=" * 35)
    test_database()